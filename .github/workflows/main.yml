name: Proyecto con pruebas de sistema

on:
  push:
    branches:
      - main

permissions:
  actions: write
  contents: read

jobs:
  despliegue:
    name: Desplegar servicios en pruebas
    runs-on: ubuntu-latest

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Limpiar contenedores antiguos
        run: docker compose down --volumes --remove-orphans || true

      - name: Levantar los servicios de Flask y MySQL
        run: |
          docker compose up -d --build
          echo "Esperando que los servicios arranquen..."
          # Esperar a que MySQL esté saludable
          for i in {1..10}; do
            if docker exec mysql mysqladmin ping -h localhost -uroot -prootpassword; then
              echo "MySQL está listo"
              break
            fi
            echo "Esperando MySQL... intento $i/10"
            sleep 10
          done
          # Esperar a que Flask responda
          for i in {1..10}; do
            if curl -s http://localhost:5000 > /dev/null; then
              echo "Flask está listo"
              break
            fi
            echo "Esperando Flask... intento $i/10"
            sleep 10
          done

      - name: Mostrar contenedores en ejecución
        run: docker ps -a

      - name: Mostrar logs de Flask
        run: docker logs flask > flask_logs.txt

      - name: Subir logs como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: logs-flask
          path: flask_logs.txt

  pruebas:
    name: Ejecutar pruebas de sistema
    runs-on: ubuntu-latest
    needs: despliegue

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Levantar los servicios de Flask y MySQL
        run: |
          docker compose up -d --build
          echo "Esperando que los servicios arranquen..."
          # Esperar a que MySQL esté saludable
          for i in {1..10}; do
            if docker exec mysql mysqladmin ping -h localhost -uroot -prootpassword; then
              echo "MySQL está listo"
              break
            fi
            echo "Esperando MySQL... intento $i/10"
            sleep 10
          done
          # Esperar a que Flask responda
          for i in {1..10}; do
            if curl -s http://localhost:5000 > /dev/null; then
              echo "Flask está listo"
              break
            fi
            echo "Esperando Flask... intento $i/10"
            sleep 10
          done

      - name: Instalar dependencias de pruebas
        run: |
          python -m pip install --upgrade pip
          pip install -r flask/requirements.txt  # Dependencias de la app
          pip install -r requirements-test.txt  # Dependencias de las pruebas
          pip install pytest-html  # Aseguramos pytest-html

      - name: Mostrar contenedores en ejecución
        run: docker ps -a

      - name: Verificar respuesta simple de Flask desde el contenedor
        run: |
          echo "Verificando respuesta simple de Flask desde el contenedor..."
          docker exec flask curl --retry 5 --retry-delay 5 http://localhost:5000 || echo "Fallo al conectar, revisa los logs."

      - name: Ejecutar pruebas automáticas y generar reporte HTML
        run: |
          cd tests  # Nos movemos al directorio de las pruebas
          pytest test_app.py --html=report/report.html --self-contained-html || echo "Pruebas fallaron, revisa el reporte."

      - name: Subir reporte de pruebas
        uses: actions/upload-artifact@v4
        if: always()  # Subimos el reporte incluso si las pruebas fallan
        with:
          name: reporte-pruebas
          path: tests/report/report.html