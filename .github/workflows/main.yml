name: Proyecto con pruebas de sistema

on:
  push:
    branches:
      - main

permissions:
  actions: write
  contents: read

jobs:
  despliegue:
    name: Desplegar servicios en pruebas
    runs-on: ubuntu-latest

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Limpiar contenedores antiguos
        run: docker compose down --volumes --remove-orphans || true

      - name: Levantar los servicios de Flask y MySQL
        run: |
          docker compose up -d --build
          echo "Esperando que los servicios arranquen..."
          docker ps -a
          for i in {1..5}; do
            if docker exec mysql mysqladmin ping -h localhost -uuser -puserpassword; then
              echo "MySQL está listo"
              break
            fi
            echo "Esperando MySQL... intento $i/5"
            docker logs mysql | tail -n 10
            sleep 10
          done
          docker ps | grep flask || echo "Contenedor Flask no está corriendo"
          for i in {1..5}; do
            if docker exec flask curl -s http://localhost:5000 > /dev/null 2>&1; then
              echo "Flask está listo"
              break
            fi
            echo "Esperando Flask... intento $i/5"
            docker logs flask | tail -n 10
            sleep 10
          done

      - name: Mostrar contenedores en ejecución
        run: docker ps -a

      - name: Mostrar logs de Flask
        run: docker logs flask > flask_logs.txt

      - name: Subir logs como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: logs-flask
          path: flask_logs.txt

  # Job 1 post-despliegue
  post_despliegue_job_1:
    name: Post-Despliegue Job 1 - Verificar Flask
    runs-on: ubuntu-latest
    needs: despliegue
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Levantar los servicios
        run: docker compose up -d

      - name: Verificar respuesta de Flask
        run: |
          echo "Verificando Flask desde Job 1..."
          for i in {1..5}; do
            if docker exec flask curl -s http://localhost:5000 > flask_response.txt 2>&1; then
              echo "Flask respondió correctamente"
              cat flask_response.txt
              break
            fi
            echo "Esperando respuesta de Flask... intento $i/5"
            sleep 10
          done

      - name: Subir respuesta de Flask como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: flask-response-job-1
          path: flask_response.txt

  # Job 2 post-despliegue, depende de Job 1 para garantizar el artifact
  post_despliegue_job_2:
    name: Post-Despliegue Job 2 - Verificar MySQL
    runs-on: ubuntu-latest
    needs: [despliegue, post_despliegue_job_1]
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Levantar los servicios
        run: docker compose up -d

      - name: Descargar respuesta de Job 1
        uses: actions/download-artifact@v4
        with:
          name: flask-response-job-1
          path: .

      - name: Verificar conexión a MySQL
        run: |
          echo "Verificando MySQL desde Job 2..."
          docker exec mysql mysqladmin ping -h localhost -uuser -puserpassword
          echo "Respuesta de Flask desde Job 1:"
          cat flask_response.txt
          echo "Guardando resultado de MySQL..."
          echo "MySQL está vivo" > mysql_status.txt

      - name: Subir estado de MySQL como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: mysql-status-job-2
          path: mysql_status.txt

  pruebas:
    name: Ejecutar pruebas de sistema
    runs-on: ubuntu-latest
    needs: [post_despliegue_job_1, post_despliegue_job_2]

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Levantar los servicios
        run: |
          docker compose up -d --build
          echo "Esperando que los servicios arranquen..."
          docker ps -a
          for i in {1..5}; do
            if docker exec mysql mysqladmin ping -h localhost -uuser -puserpassword; then
              echo "MySQL está listo"
              break
            fi
            echo "Esperando MySQL... intento $i/5"
            docker logs mysql | tail -n 10
            sleep 10
          done
          docker ps | grep flask || echo "Contenedor Flask no está corriendo"
          for i in {1..5}; do
            if docker exec flask curl -s http://localhost:5000 > /dev/null 2>&1; then
              echo "Flask está listo"
              break
            fi
            echo "Esperando Flask... intento $i/5"
            docker logs flask | tail -n 10
            sleep 10
          done

      - name: Instalar dependencias de la aplicación
        run: |
          python -m pip install --upgrade pip
          pip install -r flask/requirements.txt
          pip install mysql-connector-python

      - name: Instalar dependencias de pruebas
        run: |
          pip install -r requirements-test.txt
          pip install pytest requests pytest-html

      - name: Mostrar contenedores en ejecución
        run: docker ps -a

      - name: Verificar respuesta simple de Flask
        run: |
          echo "Verificando respuesta simple de Flask desde el contenedor..."
          docker exec flask curl --retry 5 --retry-delay 5 http://localhost:5000 || echo "Fallo al conectar, revisa los logs."

      - name: Verificar conexión a MySQL
        run: |
          echo "Verificando conexión a MySQL..."
          docker exec flask python -c "import mysql.connector; conn = mysql.connector.connect(host='mysql', user='user', password='userpassword', database='testdb'); print('Conexión exitosa' if conn.is_connected() else 'Fallo en la conexión'); conn.close()" || echo "Fallo al conectar a MySQL, revisa los logs."

      - name: Ejecutar pruebas automáticas y generar reporte HTML
        run: |
          cd tests
          pytest test_app.py --html=report/report.html --self-contained-html -v || echo "Pruebas fallaron, revisa el reporte."

      - name: Subir reporte de pruebas
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reporte-pruebas
          path: tests/report/report.html